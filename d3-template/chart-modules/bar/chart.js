// Generated by CoffeeScript 1.6.2
(function() {
  define(['../common/property'], function(Property) {
    return function() {
      var chart, devMap, dispatch, formatPercent, height, margin, nameMap, properties, tooltip, valueMap, width, x, xAxis, y, yAxis;

      margin = {
        top: 20,
        right: 0,
        bottom: 20,
        left: 70
      };
      width = 720;
      height = 300;
      x = d3.scale.ordinal();
      y = d3.scale.linear();
      xAxis = d3.svg.axis().scale(x).orient('bottom');
      yAxis = d3.svg.axis().scale(y).orient('left').tickFormat(d3.format(','));
      formatPercent = d3.format('.1p');
      nameMap = function(d) {
        return d.name;
      };
      valueMap = function(d) {
        return d.value;
      };
      devMap = null;
      tooltip = function() {};
      dispatch = d3.dispatch('mouseover', 'mouseout');
      properties = {
        width: new Property(function(value) {
          width = value - margin.left - margin.right;
          x.rangeRoundBands([0, width], .1);
          return yAxis.tickSize(-width, 0, 0);
        }),
        height: new Property(function(value) {
          height = value - margin.top - margin.bottom;
          return y.range([height, 0]);
        }),
        margin: new Property(function(value) {
          margin = _.extend(margin, value);
          properties.width.reset();
          return properties.height.reset();
        }),
        names: new Property(function(value) {
          return nameMap = value;
        }),
        values: new Property(function(value) {
          return valueMap = value;
        }),
        devs: new Property(function(value) {
          return devMap = value;
        }),
        tooltip: new Property(function(value) {
          return tooltip = value;
        }),
        funnel: new Property,
        drawExpectedValue: new Property,
        coalescing: new Property,
        xAxis: new Property,
        yAxis: new Property
      };
      properties.width.set(width);
      properties.height.set(height);
      chart = function(selection) {
        return selection.each(function(data) {
          var $devG, $devGEnter, $expG, $expGEnter, $g, $gEnter, $main, $mainEnter, $rect, $selection, $svg, $xAxis, $yAxis, addHorizontalLine, addVerticalLine, chartData, coalescing, distribution, expectedValue, keys, realX, statistics, stnDev, total, variance, xAxisProps, yAxisProps;

          $selection = d3.select(this);
          chartData = data;
          coalescing = properties.coalescing.get();
          statistics = null;
          if (!!coalescing || properties.drawExpectedValue.get()) {
            total = _(data).map(function(d) {
              return d.value;
            }).reduce(function(a, b) {
              return a + b;
            });
            distribution = _(data).map(function(d) {
              return d.name * (d.value / total);
            });
            expectedValue = distribution.reduce(function(a, b) {
              return a + b;
            });
            variance = data.map(function(d) {
              return Math.pow(d.name - expectedValue, 2) * (d.value / total);
            }).reduce(function(a, b) {
              return a + b;
            });
            stnDev = Math.sqrt(variance);
            statistics = {
              expectedValue: expectedValue,
              stnDev: stnDev
            };
          }
          if (!!coalescing) {
            if (coalescing < (expectedValue + stnDev)) {
              coalescing = Math.ceil(expectedValue + stnDev);
            }
            chartData = _(data).foldl((function(acc, a) {
              if (a.name <= coalescing) {
                acc.push({
                  name: a.name,
                  value: a.value
                });
              } else {
                acc[acc.length - 1].value += a.value;
              }
              return acc;
            }), []);
          }
          $svg = $selection.selectAll('svg').data([chartData]);
          $gEnter = $svg.enter().append('svg').append('g');
          $svg.attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom);
          $g = $svg.select('g').attr('transform', "translate(" + margin.left + "," + margin.top + ")");
          $gEnter.append('g').attr('class', 'x axis');
          $xAxis = $svg.select('.x.axis').attr("transform", "translate(0," + height + ")");
          $gEnter.append('g').attr('class', 'y axis');
          $yAxis = $svg.select('.y.axis');
          keys = _.flatten(chartData.map(nameMap));
          x.domain(keys);
          y.domain([0, d3.max(chartData.map(valueMap))]);
          $main = $g.selectAll('g.main').data(chartData);
          $mainEnter = $main.enter().append('g').attr('class', 'main');
          $main.transition().duration(200);
          $mainEnter.append('rect').on('mouseover', function(d) {
            return dispatch.mouseover(d);
          }).on('mouseout', function(d) {
            return dispatch.mouseout(d);
          }).call(tooltip);
          $rect = $main.select('rect');
          $rect.transition().duration(200).attr('width', x.rangeBand()).attr('x', function(d) {
            return x(nameMap(d));
          }).attr('y', function(d) {
            return y(valueMap(d));
          }).attr('height', function(d) {
            return height - y(valueMap(d));
          }).style('fill', function(d, i) {
            return '#ff7f0e';
          });
          if (!!properties.funnel.get()) {
            total = data.map(valueMap)[0];
            $mainEnter.append('text').attr('class', 'percentage');
            $main.select('text.percentage').attr('x', function(d) {
              return x(nameMap(d)) + x.rangeBand() / 2;
            }).attr('y', height - (height * .15)).text(function(d) {
              return formatPercent(valueMap(d) / total);
            }).style("text-anchor", "middle");
          }
          if (properties.drawExpectedValue.get()) {
            expectedValue = statistics.expectedValue;
            stnDev = statistics.stnDev;
            $expGEnter = $gEnter.append('g').attr('class', 'exp');
            $expG = $g.select('g.exp').transition().duration(200);
            realX = function(value) {
              var min;

              min = _.min(data.map(function(d) {
                return d.name;
              }));
              if (value < min) {
                return x(min);
              } else {
                return x(Math.floor(value)) + (value - Math.floor(value)) * x.rangeBand();
              }
            };
            addVerticalLine = function(value, className) {
              var lineX;

              lineX = realX(value);
              $expGEnter.append('line').attr('class', className);
              return $expG.select('line.' + className).transition().duration(200).attr('x1', lineX).attr('x2', lineX).attr('y1', 0).attr('y2', height);
            };
            addHorizontalLine = function(value, x1, x2, className) {
              var lineY;

              lineY = y(value);
              $expGEnter.append('line').attr('class', className);
              return $expG.select('line.' + className).transition().duration(200).attr('x1', realX(x1)).attr('x2', realX(x2)).attr('y1', lineY).attr('y2', lineY).style("stroke", "black");
            };
            addVerticalLine(expectedValue, "exp");
            addVerticalLine(expectedValue - stnDev, "leftStnDev");
            addVerticalLine(expectedValue + stnDev, "rightStnDev");
            console.log(expectedValue, expectedValue - stnDev, expectedValue + stnDev);
            console.log(realX(expectedValue), realX(expectedValue - stnDev), realX(expectedValue + stnDev));
            console.log(coalescing);
            console.log("----");
            (function() {
              var nameExpectedValue, nameStnDev, nameVariance;

              total = chartData.map(function(d) {
                return d.name;
              }).reduce(function(a, b) {
                return a + b;
              });
              distribution = _(data).map(function(d) {
                return d.value * (d.name / total);
              });
              nameExpectedValue = distribution.reduce(function(a, b) {
                return a + b;
              });
              nameVariance = data.map(function(d) {
                return Math.pow(d.name - expectedValue, 2) * (d.value / total);
              }).reduce(function(a, b) {
                return a + b;
              });
              nameStnDev = Math.sqrt(variance);
              return addHorizontalLine(nameExpectedValue, expectedValue - stnDev, expectedValue + stnDev, "stnDev-hline");
            })();
          }
          if (!!devMap) {
            $devGEnter = $mainEnter.append('g').attr('class', 'dev');
            $devG = $main.select('g.dev').transition().duration(200).attr('transform', function(d) {
              return 'translate(0,' + (-height + y(valueMap(d)) - (-height + y(devMap(d))) / 2) + ')';
            });
            $devGEnter.append('line').attr('class', 'dev up');
            $devG.select('line.dev.up').transition().duration(200).attr('x1', _.compose(x, nameMap)).attr('x2', function(d) {
              return _.compose(x, nameMap)(d) + x.rangeBand();
            }).attr('y1', _.compose(y, devMap)).attr('y2', _.compose(y, devMap));
            $devGEnter.append('line').attr('class', 'dev low');
            $devG.select('line.dev.low').transition().duration(200).attr('x1', _.compose(x, nameMap)).attr('x2', function(d) {
              return _.compose(x, nameMap)(d) + x.rangeBand();
            }).attr('y1', y(0)).attr('y2', y(0));
            $devGEnter.append('rect').attr('class', 'dev');
            $devG.select('rect.dev').transition().duration(200).attr('width', x.rangeBand() * .25).attr('x', function(d) {
              return x(nameMap(d)) + x.rangeBand() * .375;
            }).attr('y', _.compose(y, devMap)).attr('height', function(d) {
              return height - (_.compose(y, devMap))(d);
            });
          }
          $main.exit().select('rect').attr('y', 0).attr('height', 0);
          $xAxis.transition().duration(200).call(xAxis).selectAll("text").text(function(d) {
            if (!!coalescing && d >= coalescing) {
              return d + "+";
            } else {
              return d;
            }
          });
          $yAxis.transition().duration(200).call(yAxis);
          xAxisProps = properties.xAxis.get();
          if (!!xAxisProps) {
            $gEnter.append("text").attr("class", "x label");
            $g.select('text.x.label').attr("text-anchor", "end").attr("x", width).attr("y", height + margin.bottom).text(xAxisProps.text).attr("dy", xAxisProps.dy || 0);
          }
          yAxisProps = properties.yAxis.get();
          if (!!yAxisProps) {
            $gEnter.append("text").attr("class", "y label");
            $g.select('text.y.label').attr("text-anchor", "end").attr("y", 0 - margin.left).attr("dy", yAxisProps.dy || 0).attr("transform", "rotate(-90)").text(yAxisProps.text);
          }
          return null;
        });
      };
      null;
      chart = Property.expose(chart, properties);
      return chart;
    };
  });

}).call(this);
